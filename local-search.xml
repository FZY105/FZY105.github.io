<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>十大管理思维导图</title>
    <link href="/2024/09/19/%E5%8D%81%E5%A4%A7%E7%AE%A1%E7%90%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <url>/2024/09/19/%E5%8D%81%E5%A4%A7%E7%AE%A1%E7%90%86%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="https://cdn.jsdelivr.net/gh/FZY105/FzyBlogSource/十大管理.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>PMP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PMP易错易忘易混淆知识点总结</title>
    <link href="/2024/09/18/PMP%E6%98%93%E9%94%99%E6%98%93%E5%BF%98%E6%98%93%E6%B7%B7%E6%B7%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/18/PMP%E6%98%93%E9%94%99%E6%98%93%E5%BF%98%E6%98%93%E6%B7%B7%E6%B7%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="业务环境"><a href="#业务环境" class="headerlink" title="业务环境"></a>业务环境</h1><p>待更新。。。</p><h1 id="人员"><a href="#人员" class="headerlink" title="人员"></a>人员</h1><h4 id="1-建设团队（塔克曼阶梯理论）"><a href="#1-建设团队（塔克曼阶梯理论）" class="headerlink" title="1.建设团队（塔克曼阶梯理论）"></a>1.建设团队（塔克曼阶梯理论）</h4><p>形成阶段：团队成员相互认识，并了解项目情况及他们在项目中的正式角色与职责在这一阶段，团队成员倾向于相互独立，不一定开诚布公（关键字：独立，自我，不引发冲突，组建）</p><p>震荡阶段：团队开始从事项目工作、制定技术决策和讨论项目管理方法（关键字：冲突，反对，争执）</p><p>规范阶段：团队成员开始协同工作，并调整各自的工作习惯和行为来支持团队，团队成员会学习相互信任（关键字：信任，开始建立，规范，喜欢互动）</p><p>成熟阶段：团队就像一个组织有序的单位那样工作，团队成员之间相互依靠，平稳高效地解决问题（关键字：组织有序，相互协作）</p><p>解散阶段：团队完成所有工作，团队成员离开项目（关键字：结束）</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h4 id="1-合同类型（买方风险从小到大，做题先判断是总价还是成本，成本类合同相对于总价类合同容易变更）"><a href="#1-合同类型（买方风险从小到大，做题先判断是总价还是成本，成本类合同相对于总价类合同容易变更）" class="headerlink" title="1.合同类型（买方风险从小到大，做题先判断是总价还是成本，成本类合同相对于总价类合同容易变更）"></a>1.合同类型（买方风险从小到大，做题先判断是总价还是成本，成本类合同相对于总价类合同容易变更）</h4><p>固定总价合同：范围明确且不变</p><p>总价加激励合同：设定上限，同步目标</p><p>总价加经济价格调整：时间很长，不同货币</p><p>工料合同：范围不明确，聘请专家（适用于在无法编排出准确的工作说明书的情况下扩充人员、聘用专家或寻求外部支持的情况）</p><p>成本加奖励费：主观奖励，无权申诉</p><p>成本加激励费：同步目标（按绩效分配费用）</p><p>成本加固定费：实报实销，范围会有很大的变化</p><h4 id="2-项目章程"><a href="#2-项目章程" class="headerlink" title="2.项目章程"></a>2.项目章程</h4><p>项目章程是由项目启动人或发起人发布的，正式批准项目成立，并授权项目经理使用组织资源开展项目活动的文件。它记录了关于项目和项目预期交付的产品、服务或成果的高层级信息，例如高层级需求、高层级项目描述、边界定义以及主要可交付成果等，项目经理的角色定义也在这里。</p><h4 id="3-管理质量"><a href="#3-管理质量" class="headerlink" title="3.管理质量"></a>3.管理质量</h4><p>质量保证（QA）：着眼于项目使用的过程，旨在高效地执行项目过程，包括遵守和满足标准，向相关方保证最终产品可以满足他们的需求、期望和要求。</p><p>质量控制（QC）：通常用于在提交给客户验收前的内部测试。</p><p>质量规划：是为在整个项目期间如何管理和核实质量提供指南和方向。</p><h4 id="4-数据表现"><a href="#4-数据表现" class="headerlink" title="4.数据表现"></a>4.数据表现</h4><p><img src="/img/%E9%B1%BC%E9%AA%A8%E5%9B%BE.png"></p><p>石川图（又称“鱼骨图”、“why-why分析图”和“因果图”）：将问题陈述的原因分解为离散的分支，有助于识别问题的主要原因或根本原因。</p><p><img src="/img/%E5%B8%95%E7%B4%AF%E6%89%98%E5%9B%BE.png"></p><p>帕累托图：通常用于分析导致问题发生的主要原因。</p><p><img src="/img/%E7%9B%B4%E6%96%B9%E5%9B%BE.png"></p><p>直方图：通常用于统计问题出现的频率。</p><p><img src="/img/%E6%8E%A7%E5%88%B6%E5%9B%BE.png"></p><p>控制图：通常用于分析过程是否稳定可控。</p><p><img src="/img/%E6%95%A3%E7%82%B9%E5%9B%BE.png"></p><p>散点图：通常用于分析变量之间的关系。</p><h4 id="5-估算技术"><a href="#5-估算技术" class="headerlink" title="5.估算技术"></a>5.估算技术</h4><p>自下而上估算（精度最高）：是对工作组成部分进行估算的一种方法。首先对单个工作包或活动的成本进行最具体、细致的估算，然后把这些细节性成本向上汇总或“滚动”到更高层次，用于后续报告和跟踪。</p><p>类比估算：成本类比估算使用以往类似项目的参数值或属性来估算。</p><p><img src="/img/%E4%B8%89%E7%82%B9%E4%BC%B0%E7%AE%97.png"></p><p>三点估算：通过考虑估算中的不确定性与风险，使用三种估算值来界定活动成本的近似区间，可以提高单点成本估算的准确性。</p><p>参数估算（精度取决于参数准确性）：是指利用历史数据之间的统计关系和其他变量来进行项目工作的成本估算。</p>]]></content>
    
    
    <categories>
      
      <category>PMP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PMP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java设计模式-创建型模式-（单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式）</title>
    <link href="/2024/09/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>创建型模式为了让对象的创建与使用分离！</p><h1 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h1><h2 id="1-饿汉式单例"><a href="#1-饿汉式单例" class="headerlink" title="1.饿汉式单例"></a>1.饿汉式单例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//饿汉式单例(一上来就给对象加载了)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Hungry</span> &#123;<br>    <span class="hljs-comment">//可能会浪费空间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] data1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] data2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] data3=<span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">byte</span>[] data4=<span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Hungry</span>()</span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">private</span> final <span class="hljs-keyword">static</span> Hungry HUNGRY=<span class="hljs-keyword">new</span> Hungry();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hungry <span class="hljs-title">getInstance</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> HUNGRY;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="2-懒汉式单例"><a href="#2-懒汉式单例" class="headerlink" title="2.懒汉式单例"></a>2.懒汉式单例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//懒汉式单例(单线程下确实ok，但是多线程并发时不行)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span> &#123;<br>    <span class="hljs-comment">//5.防止同样是反射建的对象2和3不相同，使用标志位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  boolean biaozhiwei=<span class="hljs-literal">false</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span>()</span> &#123;<br>        <span class="hljs-comment">//4.防止反射破坏</span><br>        synchronized (LazyMan.<span class="hljs-keyword">class</span>)&#123;<br>            <span class="hljs-comment">//判断标志位</span><br>            <span class="hljs-keyword">if</span> (biaozhiwei==<span class="hljs-literal">false</span>)&#123;<br>                biaozhiwei=<span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;不要试图使用反射破坏异常&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//volatile防止指令重排</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span>()</span> &#123;<br>        <span class="hljs-comment">//2.加锁(双重检测锁模式的懒汉式单例 简称DCL懒汉式)</span><br>        <span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-literal">null</span>) &#123;<br>            synchronized (LazyMan.<span class="hljs-keyword">class</span>) &#123;<br>                <span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-literal">null</span>) &#123;<br>                    lazyMan = <span class="hljs-keyword">new</span> LazyMan();<span class="hljs-comment">//不是一个原子性操作</span><br>                    <span class="hljs-comment">/***</span><br><span class="hljs-comment">                     *   会发生的步骤</span><br><span class="hljs-comment">                     * 1.分配内存空间</span><br><span class="hljs-comment">                     * 2.执行构造方法，初始化对象</span><br><span class="hljs-comment">                     * 3.把这个对象指向这个空间</span><br><span class="hljs-comment">                     *（在lazyMan对象生成过程中，可能出现指令重排导致lazyMan是一个虚无的对象，需要加上volatile）</span><br><span class="hljs-comment">                     */</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lazyMan;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>) throws Exception</span>  &#123;<br>        <span class="hljs-comment">//6.破坏标志位处理</span><br>        Field biaozhiwei = LazyMan.<span class="hljs-keyword">class</span>.getDeclaredField(<span class="hljs-string">&quot;biaozhiwei&quot;</span>);<br>        biaozhiwei.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//3.反射可以破坏这种单例，instance和instance2值不相同</span><br>        LazyMan instance=LazyMan.getInstance();<br>        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.<span class="hljs-keyword">class</span>.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        LazyMan instance2 = declaredConstructor.newInstance();<br>        <span class="hljs-comment">//2和3又不相同了</span><br>        biaozhiwei.<span class="hljs-keyword">set</span>(instance2,<span class="hljs-literal">false</span>);<br>        LazyMan instance3 = declaredConstructor.newInstance();<br>        System.<span class="hljs-keyword">out</span>.println(instance);<br>        System.<span class="hljs-keyword">out</span>.println(instance2);<br>        System.<span class="hljs-keyword">out</span>.println(instance3);<br>    &#125;<br>    <span class="hljs-comment">//1.多线程并发</span><br><span class="hljs-comment">//    public static void main(String[] args) &#123;</span><br><span class="hljs-comment">//        for (int i=0;i&lt;10;i++)&#123;</span><br><span class="hljs-comment">//            new Thread(()-&gt;&#123;</span><br><span class="hljs-comment">//                LazyMan.getInstance();</span><br><span class="hljs-comment">//            &#125;).start();</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125; <br></code></pre></td></tr></table></figure><h2 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="3.静态内部类"></a>3.静态内部类</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//静态内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Holder</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Holder</span>()</span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Holder <span class="hljs-title">getInstance</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> InnerClass.HOLDER;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final Holder HOLDER=<span class="hljs-keyword">new</span> Holder();<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="4-枚举"><a href="#4-枚举" class="headerlink" title="4.枚举"></a>4.枚举</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//枚举本身也是一个class的类(反射不能破坏枚举)</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> EnumSingle &#123;<br>    INSTANCE;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> EnumSingle <span class="hljs-title">getInstance</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>) throws Exception</span> &#123;<br>        EnumSingle instance1 = EnumSingle.INSTANCE;<br>        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.<span class="hljs-keyword">class</span>.getDeclaredConstructor(String.<span class="hljs-keyword">class</span>,<span class="hljs-built_in">int</span>.<span class="hljs-keyword">class</span>);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        EnumSingle instance3 = declaredConstructor.newInstance();<br>        EnumSingle instance2 = EnumSingle.INSTANCE;<br>        System.<span class="hljs-keyword">out</span>.println(instance1);<br>        System.<span class="hljs-keyword">out</span>.println(instance2);<br>        System.<span class="hljs-keyword">out</span>.println(instance3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、工厂模式（实现了创建者和调用者分离）"><a href="#二、工厂模式（实现了创建者和调用者分离）" class="headerlink" title="二、工厂模式（实现了创建者和调用者分离）"></a>二、工厂模式（实现了创建者和调用者分离）</h1><p>核心：实例化对象不用new，用工厂方法代替，将调用者跟实现类进行解耦。</p><h2 id="1-简单工厂模式（如果增加一个新的产品，你不修改代码做不到）"><a href="#1-简单工厂模式（如果增加一个新的产品，你不修改代码做不到）" class="headerlink" title="1.简单工厂模式（如果增加一个新的产品，你不修改代码做不到）"></a>1.简单工厂模式（如果增加一个新的产品，你不修改代码做不到）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//静态工厂模式（如果增加一个新的产品，你不修改代码做不到）</span><br><span class="hljs-comment">//不满足开闭原则</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> &#123;<br>    <span class="hljs-comment">//方法一</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  Car <span class="hljs-title">getCar</span>(<span class="hljs-params">String car</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (car.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;五菱&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WuLing();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (car.<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;特斯拉&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tesla();<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方法二（优化）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car <span class="hljs-title">getWuLing</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WuLing();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Car <span class="hljs-title">getTesla</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tesla();<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="2-工厂方法模式（支持增加新产品）"><a href="#2-工厂方法模式（支持增加新产品）" class="headerlink" title="2.工厂方法模式（支持增加新产品）"></a>2.工厂方法模式（支持增加新产品）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//工厂方法模式（Consumer类）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WuLingFactory</span>().getCar();<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TeslaFactory</span>().getCar();<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">car3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MoBaiFactory</span>().getCar();<br>        car.name();<br>        car2.name();<br>        car3.name();<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//五菱工厂类</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">WuLingFactory</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">CarFactory</span></span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Car getCar() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> WuLing();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//车工厂类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">CarFactory</span> &#123;<br>    <span class="hljs-function">Car <span class="hljs-title">getCar</span>()</span>;<br>&#125;<br><span class="hljs-comment">//车接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Car</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">name</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//五菱类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WuLing</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">name</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;五菱宏光&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、抽象工厂模式（优：具体产品在应用层的代码隔离，无需关心创建的细节；缺：扩展新的产品困难，增加了系统的抽象性和理解难度）"><a href="#三、抽象工厂模式（优：具体产品在应用层的代码隔离，无需关心创建的细节；缺：扩展新的产品困难，增加了系统的抽象性和理解难度）" class="headerlink" title="三、抽象工厂模式（优：具体产品在应用层的代码隔离，无需关心创建的细节；缺：扩展新的产品困难，增加了系统的抽象性和理解难度）"></a>三、抽象工厂模式（优：具体产品在应用层的代码隔离，无需关心创建的细节；缺：扩展新的产品困难，增加了系统的抽象性和理解难度）</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//抽象生产工厂</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IProductFactory</span> &#123;<br>    <span class="hljs-comment">//生产手机</span><br>    <span class="hljs-function">IphoneProduct <span class="hljs-title">iphoneProduct</span>()</span>;<br>    <span class="hljs-comment">//生产路由</span><br>    <span class="hljs-function">IRouterProduct <span class="hljs-title">routerProduct</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1.png"></p><h1 id="四、建造者模式"><a href="#四、建造者模式" class="headerlink" title="四、建造者模式"></a>四、建造者模式</h1><p>作用：在用户不知道对象的建造和细节的情况下就可以直接创建复杂的对象</p><p>过程：工厂建零件&#x3D;&gt;建造组装&#x3D;&gt;用户使用</p><p>Builder类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//抽象的建造者：方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildA</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildB</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildC</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildD</span>()</span>;<br>    <span class="hljs-comment">//完工，得到产品</span><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Product <span class="hljs-title">getProduct</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Product类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//产品：房子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> buildA;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> buildB;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> buildC;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> buildD;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildA</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> buildA;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildA</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildA</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">buildA</span> = buildA;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildB</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> buildB;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildB</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildB</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">buildB</span> = buildB;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildC</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> buildC;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildC</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildC</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">buildC</span> = buildC;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildD</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> buildD;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildD</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildD</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">buildD</span> = buildD;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Product&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;buildA=&#x27;&quot;</span> + buildA + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, buildB=&#x27;&quot;</span> + buildB + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, buildC=&#x27;&quot;</span> + buildC + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, buildD=&#x27;&quot;</span> + buildD + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Worker类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//具体的建造者：工人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> <span class="hljs-title">extends</span> <span class="hljs-title">Builder</span>&#123;<br>    <span class="hljs-keyword">private</span> Product product;<br><span class="hljs-comment">//重要</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span>()</span> &#123;<br>        product = <span class="hljs-keyword">new</span> Product();<br>    &#125;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildA</span>()</span> &#123;<br>        product.setBuildA( <span class="hljs-string">&quot;AAAA&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;AAAA&quot;</span>);<br>    &#125;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildB</span>()</span> &#123;<br>        product.setBuildA( <span class="hljs-string">&quot;BBBB&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;BBBB&quot;</span>);<br>    &#125;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildC</span>()</span> &#123;<br>        product.setBuildA( <span class="hljs-string">&quot;CCCC&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;CCCC&quot;</span>);<br>    &#125;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildD</span>()</span> &#123;<br>        product.setBuildA( <span class="hljs-string">&quot;DDDD&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;DDDD&quot;</span>);<br>    &#125;<br>    @Override<br>    <span class="hljs-function">Product <span class="hljs-title">getProduct</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Director类</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//指挥，核心，负责指挥构建一个工程，工程如何构建由他决定</span><br>public class Director &#123;<br>    <span class="hljs-comment">//可以指挥工人按照顺序建造</span><br>    public Product <span class="hljs-built_in">build</span>(Builder builder)&#123;<br>        builder<span class="hljs-selector-class">.buildA</span>();<br>        builder<span class="hljs-selector-class">.buildB</span>();<br>        builder<span class="hljs-selector-class">.buildC</span>();<br>        builder<span class="hljs-selector-class">.buildD</span>();<br>        return builder<span class="hljs-selector-class">.getProduct</span>();<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>Test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//指挥</span><br>        <span class="hljs-type">Director</span> <span class="hljs-variable">director</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Director</span>();<br>        <span class="hljs-comment">//指挥具体工人</span><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">build</span> <span class="hljs-operator">=</span> director.build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>());<br>        System.out.println(build.toString());<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="建造者模式（通过内部类）"><a href="#建造者模式（通过内部类）" class="headerlink" title="建造者模式（通过内部类）"></a>建造者模式（通过内部类）</h2><p>Test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//服务员</span><br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>();<br>        <span class="hljs-comment">//链式编程</span><br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> worker.buildA(<span class="hljs-string">&quot;全家桶&quot;</span>).buildB(<span class="hljs-string">&quot;雪碧&quot;</span>).getProduct();<br>        System.out.println(product.toString());<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>Product类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> <span class="hljs-title class_">BuildA</span>=<span class="hljs-string">&quot;汉堡&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> <span class="hljs-title class_">BuildB</span>=<span class="hljs-string">&quot;可乐&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> <span class="hljs-title class_">BuildC</span>=<span class="hljs-string">&quot;薯条&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> <span class="hljs-title class_">BuildD</span>=<span class="hljs-string">&quot;甜点&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildA</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">BuildA</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildA</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildA</span>) &#123;<br>        <span class="hljs-title class_">BuildA</span> = buildA;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildB</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">BuildB</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildB</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildB</span>) &#123;<br>        <span class="hljs-title class_">BuildB</span> = buildB;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildC</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">BuildC</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildC</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildC</span>) &#123;<br>        <span class="hljs-title class_">BuildC</span> = buildC;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBuildD</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">BuildD</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBuildD</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> buildD</span>) &#123;<br>        <span class="hljs-title class_">BuildD</span> = buildD;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Product&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;BuildA=&#x27;&quot;</span> + <span class="hljs-title class_">BuildA</span> + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, BuildB=&#x27;&quot;</span> + <span class="hljs-title class_">BuildB</span> + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, BuildC=&#x27;&quot;</span> + <span class="hljs-title class_">BuildC</span> + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, BuildD=&#x27;&quot;</span> + <span class="hljs-title class_">BuildD</span> + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Worker类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Builder</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Product</span> product;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Worker</span>() &#123;<br>        product =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-title class_">Builder</span> <span class="hljs-title function_">buildA</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> msg</span>) &#123;<br>        product.<span class="hljs-title function_">setBuildA</span>(msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-title class_">Builder</span> <span class="hljs-title function_">buildB</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> msg</span>) &#123;<br>        product.<span class="hljs-title function_">setBuildB</span>(msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-title class_">Builder</span> <span class="hljs-title function_">buildC</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> msg</span>) &#123;<br>        product.<span class="hljs-title function_">setBuildC</span>(msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-title class_">Builder</span> <span class="hljs-title function_">buildD</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> msg</span>) &#123;<br>        product.<span class="hljs-title function_">setBuildD</span>(msg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-title class_">Product</span> <span class="hljs-title function_">getProduct</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Builder类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Builder <span class="hljs-title">buildA</span>(<span class="hljs-params">String msg</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Builder <span class="hljs-title">buildB</span>(<span class="hljs-params">String msg</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Builder <span class="hljs-title">buildC</span>(<span class="hljs-params">String msg</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Builder <span class="hljs-title">buildD</span>(<span class="hljs-params">String msg</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Product <span class="hljs-title">getProduct</span>()</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h1 id="五、原型模式（实现一个接口：Cloneable；重写一个方法：clone）"><a href="#五、原型模式（实现一个接口：Cloneable；重写一个方法：clone）" class="headerlink" title="五、原型模式（实现一个接口：Cloneable；重写一个方法：clone）"></a>五、原型模式（实现一个接口：Cloneable；重写一个方法：clone）</h1><p> Video类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Video</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Date</span> createTime;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">clone</span>() throws <span class="hljs-title class_">CloneNotSupportedException</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">clone</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Video</span>() &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Video</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Date</span> createTime) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">createTime</span> = createTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Date</span> <span class="hljs-title function_">getCreateTime</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCreateTime</span>(<span class="hljs-params"><span class="hljs-title class_">Date</span> createTime</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">createTime</span> = createTime;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Video&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, createTime=&quot;</span> + createTime +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>bilbil类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//原型模式clone<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> bilbil &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws CloneNotSupportedException &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-type">date</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>        Video v1 = <span class="hljs-built_in">new</span> Video(&quot;feng&quot;,<span class="hljs-type">date</span>);<br>        Video v2 = (Video) v1.clone();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(v1);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;v1--hash=&quot;+v1.hashCode());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(v2);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;v2--hash=&quot;+v2.hashCode());<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>结果</p><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2.png"></p><h2 id="改造原型模式（浅拷贝-深拷贝）"><a href="#改造原型模式（浅拷贝-深拷贝）" class="headerlink" title="改造原型模式（浅拷贝&#x3D;&gt;深拷贝）"></a>改造原型模式（浅拷贝&#x3D;&gt;深拷贝）</h2><p>Video类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Video</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Date</span> createTime;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">clone</span>() throws <span class="hljs-title class_">CloneNotSupportedException</span> &#123;<br>        <span class="hljs-comment">//对clone方法进行改造</span><br>        <span class="hljs-title class_">Object</span> obj = <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">clone</span>();<br>        <span class="hljs-title class_">Video</span> v = (<span class="hljs-title class_">Video</span>) obj;<br>        <span class="hljs-comment">//将这个对象的属性也进行克隆(实现深克隆)</span><br>        v.<span class="hljs-property">createTime</span> = (<span class="hljs-title class_">Date</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">createTime</span>.<span class="hljs-title function_">clone</span>();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Video</span>() &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Video</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Date</span> createTime) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">createTime</span> = createTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Date</span> <span class="hljs-title function_">getCreateTime</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCreateTime</span>(<span class="hljs-params"><span class="hljs-title class_">Date</span> createTime</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">createTime</span> = createTime;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Video&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, createTime=&quot;</span> + createTime +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>bilbil类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//解决原型模式clone后，修改原型，拷贝的也跟着变，浅拷贝改为深拷贝（对clone方法进行改造）<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> bilbil &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws CloneNotSupportedException &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-type">date</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>        Video v1 = <span class="hljs-built_in">new</span> Video(&quot;feng&quot;,<span class="hljs-type">date</span>);<br>        Video v2 = (Video) v1.clone();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(v1);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(v2);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;--------------------------&quot;);<br>        <span class="hljs-type">date</span>.setTime(<span class="hljs-number">43242424</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(v1);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;v1--hash=&quot;+v1.hashCode());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(v2);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;v2--hash=&quot;+v2.hashCode());<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++一些有用的网站</title>
    <link href="/2024/09/09/C-%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2024/09/09/C-%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h4 id="标准库："><a href="#标准库：" class="headerlink" title="标准库："></a>标准库：</h4><ul><li><p>C++ Standard Library headers](<a href="https://en.cppreference.com/w/cpp/header">https://en.cppreference.com/w/cpp/header</a>) − C++ 标准库。</p></li><li><p><a href="http://en.wikibooks.org/wiki/C++_Programming">C++ Programming</a> − 这本书涵盖了 C++ 语言编程、软件交互设计、C++ 语言的现实生活应用。</p></li><li><p><a href="http://www.sunistudio.com/cppfaq/">C++ FAQ</a> − C++ 常见问题</p></li><li><p><a href="http://www.thefreecountry.com/sourcecode/cpp.shtml">Free Country</a> − Free Country 提供了免费的 C++ 源代码和 C++ 库，这些源代码和库涵盖了压缩、存档、游戏编程、标准模板库和 GUI 编程等 C++ 编程领域。</p></li><li><p><a href="http://www.hal9k.com/cug/">C and C++ Users Group</a> − C 和 C++ 的用户团体提供了免费的涵盖各种编程领域 C++ 项目的源代码，包括 AI、动画、编译器、数据库、调试、加密、游戏、图形、GUI、语言工具、系统编程等。</p></li><li><p><a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">cppreference.com</a></p></li><li><p><a href="https://cplusplus.com/reference/">cplusplus.com&#x2F;reference&#x2F;</a></p></li></ul><h5 id="linux下：linux-下使用-man-查看-c-库函数-linux-man-可以查看c-库的命令吗-CSDN博客"><a href="#linux下：linux-下使用-man-查看-c-库函数-linux-man-可以查看c-库的命令吗-CSDN博客" class="headerlink" title="linux下：linux 下使用 man 查看 c++ 库函数_linux man 可以查看c++库的命令吗-CSDN博客"></a>linux下：<a href="https://blog.csdn.net/u012675539/article/details/50257343">linux 下使用 man 查看 c++ 库函数_linux man 可以查看c++库的命令吗-CSDN博客</a></h5><h4 id="软件：（dev-c-被大佬改进的版本）"><a href="#软件：（dev-c-被大佬改进的版本）" class="headerlink" title="软件：（dev-c++被大佬改进的版本）"></a>软件：（dev-c++被大佬改进的版本）</h4><p><a href="https://royqh.net/redpandacpp/">小熊猫C++ (royqh.net)</a></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
